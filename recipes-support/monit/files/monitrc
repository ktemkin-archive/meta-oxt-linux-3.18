###############################################################################
## Monit control file
###############################################################################
##
## Comments begin with a '#' and extend through the end of the line. Keywords
## are case insensitive. All path's MUST BE FULLY QUALIFIED, starting with '/'.
##
## Below you will find examples of some frequently used statements. For 
## information about the control file and a complete list of statements and 
## options, please have a look in the Monit manual.
##
##
###############################################################################
## Global section
###############################################################################
##
## Start Monit in the background (run as a daemon):

set daemon 6                # check services at 6-second intervals
with start delay 12         # optional: delay the first check by 4-minutes (by 
                            # default Monit check immediately after Monit start)


## Set syslog logging with the 'daemon' facility. If the FACILITY option is
## omitted, Monit will use 'user' facility by default. If you want to log to 
## a standalone log file instead, specify the full path to the log file

set logfile syslog facility log_daemon                       


## Set the location of the Monit id file which stores the unique id for the
## Monit instance. The id is generated and stored on first Monit start. By 
## default the file is placed in $HOME/.monit.id.
#
# set idfile /var/.monit.id
#
## Set the location of the Monit state file which saves monitoring states
## on each cycle. By default the file is placed in $HOME/.monit.state. If
## the state file is stored on a persistent filesystem, Monit will recover
## the monitoring state across reboots. If it is on temporary filesystem, the
## state will be lost on reboot which may be convenient in some situations.
#
set statefile /tmp/.monit.state
#
## By default Monit will drop alert events if no mail servers are available. 
# nice, as we don't want any e-mail alerts


## Monit has an embedded web server which can be used to view status of 
## services monitored and manage services from a web interface. See the
## Monit Wiki if you want to enable SSL for the web server. 

# if there is no port set, HTTP access will be disabled. 
# for local PXE installations it will be set through the answer file
#set httpd port 2812
#    use address 127.0.0.1  # only accept connection from localhost
#    allow 127.0.0.1        # allow localhost to connect to the server, needed to run local monit commands!
#    allow admin:monit      # require user 'admin' with password 'monit'
#    allow @root           # allow users of group 'monit' to connect (rw)
#    allow @users readonly  # allow users of group 'users' to connect readonly

###############################################################################
## Services
###############################################################################
##
## Check general system resources such as load average, cpu and memory
## usage. Each test specifies a resource, conditions and the action to be
## performed should a test fail.
#
#  check system myhost.mydomain.tld
#    if loadavg (1min) > 4 then alert
#    if loadavg (5min) > 2 then alert
#    if memory usage > 75% then alert
#    if swap usage > 25% then alert
#    if cpu usage (user) > 70% then alert
#    if cpu usage (system) > 30% then alert
#    if cpu usage (wait) > 20% then alert
#
#    
## Check if a file exists, checksum, permissions, uid and gid. In addition
## to alert recipients in the global section, customized alert can be sent to 
## additional recipients by specifying a local alert handler. The service may 
## be grouped using the GROUP option. More than one group can be specified by
## repeating the 'group name' statement.
#    
#  check file apache_bin with path /usr/local/apache/bin/httpd
#    if failed checksum and 
#       expect the sum 8f7f419955cefa0b33a2ba316cba3659 then unmonitor
#    if failed permission 755 then unmonitor
#    if failed uid root then unmonitor
#    if failed gid root then unmonitor
#    alert security@foo.bar on {
#           checksum, permission, uid, gid, unmonitor
#        } with the mail-format { subject: Alarm! }
#    group server
#
#    
## Check that a process is running, in this case Apache, and that it respond
## to HTTP and HTTPS requests. Check its resource usage such as cpu and memory,
## and number of children. If the process is not running, Monit will restart 
## it by default. In case the service is restarted very often and the 
## problem remains, it is possible to disable monitoring using the TIMEOUT
## statement. This service depends on another service (apache_bin) which
## is defined above.
#    
#  check process apache with pidfile /usr/local/apache/logs/httpd.pid
#    start program = "/etc/init.d/httpd start" with timeout 60 seconds
#    stop program  = "/etc/init.d/httpd stop"
#    if cpu > 60% for 2 cycles then alert
#    if cpu > 80% for 5 cycles then restart
#    if totalmem > 200.0 MB for 5 cycles then restart
#    if children > 250 then restart
#    if loadavg(5min) greater than 10 for 8 cycles then stop
#    if failed host www.tildeslash.com port 80 protocol http 
#       and request "/somefile.html"
#       then restart
#    if failed port 443 type tcpssl protocol http
#       with timeout 15 seconds
#       then restart
#    if 3 restarts within 5 cycles then timeout
#    depends on apache_bin
#    group server

check process xenstored with pidfile /var/run/xenstored.pid
	start program = "/etc/init.d/xenstored start"
	stop program = "/etc/init.d/xenstored stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot xenstored_failed"


check process surfman with pidfile /var/run/surfman.pid
	start program = "/etc/init.d/surfman start"
	stop program = "/etc/init.d/surfman stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot surfman_failed"


check process input_server with pidfile /var/run/input_server.pid
	start program = "/etc/init.d/xenclient-input start"
	stop program = "/etc/init.d/xenclient-input stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot input_server_failed"


check process vusb_daemon matching "vusb_daemon"
	start program = "/etc/init.d/xenclient-vusb-daemon start"
	stop program = "/etc/init.d/xenclient-vusb-daemon stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot vusb_daemon_failed"

check process xenconsoled with pidfile /var/run/xenconsoled.pid
	start program = "/etc/init.d/xenconsoled start"
	stop program = "/etc/init.d/xenconsoled stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot xenconsoled_failed"


check process uid matching "uid"
	start program = "/etc/init.d/uid start"
	stop program = "/etc/init.d/uid stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot uid_failed"


# dbd can't be started through it's own init script. pidof issue (XC-8901)
check process dbd matching "dbd"
	start program = "/etc/rc5.d/S25dbd start"
	stop program = "/etc/rc5.d/S25dbd stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot dbd_failed"


check process xcpmd with pidfile /var/run/xcpmd.pid
	start program = "/etc/init.d/xcpmd start"
	stop program = "/etc/init.d/xcpmd stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot xcpmd_failed"


check process network-daemon with pidfile /var/run/network-daemon.pid
	start program = "/etc/init.d/network-daemon start"
	stop program = "/etc/init.d/network-daemon stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot network-daemon_failed"


# can't monitor by default at the moment, as it is hard to unmonitor without http access
#check process sshd_ip with pidfile /var/run/sshd.pid
#	start program = "/etc/init.d/sshd start"
#	stop program = "/etc/init.d/sshd stop"
#	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot sshd_failed"

# maybe some day
#check program sshd_enabled with path "/etc/init.d/sshd enabled"
#	if status != 0 then unmonitor sshd_ip


check process xenmgr with pidfile /var/run/xenmgr.pid
	start program = "/etc/init.d/xenmgr start"
	stop program = "/etc/init.d/xenmgr stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot xenmgr_failed"


check process updatemgr with pidfile /var/run/updatemgr.pid
	start program = "/etc/init.d/updatemgr start"
	stop program = "/etc/init.d/updatemgr stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot updatemgr_failed"


check process language-sync with pidfile /var/run/language-sync.pid
	start program = "/etc/init.d/language-sync start"
	stop program = "/etc/init.d/language-sync stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot language-sync_failed"


check process rpc-proxy-websockets with pidfile /var/run/rpc-proxy-websockets.pid
	start program = "/etc/init.d/rpc-proxy start"
	stop program = "/etc/init.d/rpc-proxy stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot rpc-proxy-websockets_failed"


check process rpc-proxy-guest with pidfile /var/run/rpc-proxy-guest.pid
	start program = "/etc/init.d/rpc-proxy start"
	stop program = "/etc/init.d/rpc-proxy stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot rpc-proxy-guest_failed"


check process rpc-proxy with pidfile /var/run/rpc-proxy.pid
	start program = "/etc/init.d/rpc-proxy start"
	stop program = "/etc/init.d/rpc-proxy stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot rpc-proxy_failed"


check process dm-agent with pidfile /var/run/dm-agent.pid
	start program = "/etc/init.d/dm-agent start"
	stop program = "/etc/init.d/dm-agent stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot dm-agent_failed"


check process icbinn_svc with pidfile /var/run/icbinn_svc.pid
	start program = "/etc/init.d/icbinn_svc start"
	stop program = "/etc/init.d/icbinn_svc stop"
	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot icbinn_svc_failed"

# needs to be monitored inside ndvm
#check process network-slave with pidfile /var/run/network-slave.pid
#	start program = "/etc/init.d/network-slave start"
#	stop program = "/etc/init.d/network-slave stop"
#	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot network-slave_failed"

#check process acpid with pidfile /var/run/acpid.pid
#	start program = "/etc/init.d/acpid start"
#	stop program = "/etc/init.d/acpid stop"
#	if 10 restarts within 11 cycles then exec "/usr/bin/display_reboot acpid_failed"

#TODO
#check process xenvm_uivm
#check process xenvm_ndvm
#check process xenvm_bla
#check process xenvm_peng
#check process dhcpc with pidfile /var/run/udhcpc.pid... or maybe not
#check stubdomains. fail -> ask to reboot

#if (after n sec) there is no ui-ready.... do stuff
# this is how we run check scripts:
# check program myscript with path "/usr/local/bin/myscript" with timeout 10 seconds
#     if status != 0 then ...(exec "/usr/local/bin/restartuivm"?) 



#
#
## Check filesystem permissions, uid, gid, space and inode usage. Other services,
## such as databases, may depend on this resource and an automatically graceful
## stop may be cascaded to them before the filesystem will become full and data
## lost.
#
#  check filesystem datafs with path /dev/sdb1
#    start program  = "/bin/mount /data"
#    stop program  = "/bin/umount /data"
#    if failed permission 660 then unmonitor
#    if failed uid root then unmonitor
#    if failed gid disk then unmonitor
#    if space usage > 80% for 5 times within 15 cycles then alert
#    if space usage > 99% then stop
#    if inode usage > 30000 then alert
#    if inode usage > 99% then stop
#    group server
#
#
## Check a file's timestamp. In this example, we test if a file is older 
## than 15 minutes and assume something is wrong if its not updated. Also,
## if the file size exceed a given limit, execute a script
#
#  check file database with path /data/mydatabase.db
#    if failed permission 700 then alert
#    if failed uid data then alert
#    if failed gid data then alert
#    if timestamp > 15 minutes then alert
#    if size > 100 MB then exec "/my/cleanup/script" as uid dba and gid dba
#
#
## Check directory permission, uid and gid.  An event is triggered if the 
## directory does not belong to the user with uid 0 and gid 0.  In addition, 
## the permissions have to match the octal description of 755 (see chmod(1)).
#
#  check directory bin with path /bin
#    if failed permission 755 then unmonitor
#    if failed uid 0 then unmonitor
#    if failed gid 0 then unmonitor
#
#
## Check a remote host availability by issuing a ping test and check the 
## content of a response from a web server. Up to three pings are sent and 
## connection to a port and an application level network check is performed.
#
#  check host myserver with address 192.168.1.1
#    if failed icmp type echo count 3 with timeout 3 seconds then alert
#    if failed port 3306 protocol mysql with timeout 15 seconds then alert
#    if failed url http://user:password@www.foo.bar:8080/?querystring
#       and content == 'action="j_security_check"'
#       then alert
#
